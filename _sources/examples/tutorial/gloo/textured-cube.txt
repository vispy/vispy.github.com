tutorial/gloo/textured-cube
---------------------------




.. code-block:: python
    
    fragment = 
    uniform sampler2D texture;
    varying vec2 v_texcoord;
    void main()
    {
        gl_FragColor = texture2D(texture, v_texcoord);
    }
    """
    
    
    def checkerboard(grid_num=8, grid_size=32):
        row_even = grid_num / 2 * [0, 1]
        row_odd = grid_num / 2 * [1, 0]
        Z = np.row_stack(grid_num / 2 * (row_even, row_odd)).astype(np.uint8)
        return 255 * Z.repeat(grid_size, axis=0).repeat(grid_size, axis=1)
    
    
    def display():
        gl.glClear(gl.GL_COLOR_BUFFER_BIT | gl.GL_DEPTH_BUFFER_BIT)
        program.draw(gl.GL_TRIANGLES, indices)
        glut.glutSwapBuffers()
    
    
    def reshape(width, height):
        gl.glViewport(0, 0, width, height)
        projection = perspective(45.0, width / float(height), 2.0, 10.0)
        program['projection'] = projection
    
    
    def keyboard(key, x, y):
        if key == '\033':
            sys.exit()
    
    
    def timer(fps):
        global theta, phi
        theta += .5
        phi += .5
        model = np.eye(4, dtype=np.float32)
        rotate(model, theta, 0, 0, 1)
        rotate(model, phi, 0, 1, 0)
        program['model'] = model
        glut.glutTimerFunc(1000 / fps, timer, fps)
        glut.glutPostRedisplay()
    
    
    # Glut init
    # --------------------------------------
    glut.glutInit(sys.argv)
    glut.glutInitDisplayMode(glut.GLUT_DOUBLE | glut.GLUT_RGBA | glut.GLUT_DEPTH)
    glut.glutCreateWindow('Rotating Cube')
    glut.glutReshapeWindow(512, 512)
    glut.glutReshapeFunc(reshape)
    glut.glutKeyboardFunc(keyboard)
    glut.glutDisplayFunc(display)
    glut.glutTimerFunc(1000 / 60, timer, 60)
    
    # Build cube data
    # --------------------------------------
    V, I, _ = cube()
    vertices = VertexBuffer(V)
    indices = IndexBuffer(I)
    
    # Build program
    # --------------------------------------
    program = Program(vertex, fragment)
    program.bind(vertices)
    
    # Build view, model, projection & normal
    # --------------------------------------
    view = np.eye(4, dtype=np.float32)
    model = np.eye(4, dtype=np.float32)
    projection = np.eye(4, dtype=np.float32)
    translate(view, 0, 0, -5)
    program['model'] = model
    program['view'] = view
    program['texture'] = checkerboard()
    
    phi, theta = 0, 0
    
    # OpenGL initalization
    # --------------------------------------
    gl.glClearColor(0.30, 0.30, 0.35, 1.00)
    gl.glEnable(gl.GL_DEPTH_TEST)
    
    # Start
    # --------------------------------------
    glut.glutMainLoop()
