:orphan:

tutorial/gloo/outlined_cube
---------------------------




.. code-block:: python
    
    fragment = 
    varying vec4 v_color;
    void main()
    {
        gl_FragColor = v_color;
    }
    """
    
    
    class Canvas(app.Canvas):
        def __init__(self):
            app.Canvas.__init__(self, size=(512, 512), title='Rotating cube',
                                keys='interactive')
            self.timer = app.Timer(1./60., self.on_timer)
    
        def on_initialize(self, event):
            # Build cube data
            V, I, O = cube()
            vertices = VertexBuffer(V)
            self.faces = IndexBuffer(I)
            self.outline = IndexBuffer(O)
    
            # Build program
            # --------------------------------------
            self.program = Program(vertex, fragment)
            self.program.bind(vertices)
    
            # Build view, model, projection & normal
            # --------------------------------------
            view = np.eye(4, dtype=np.float32)
            model = np.eye(4, dtype=np.float32)
            translate(view, 0, 0, -5)
            self.program['u_model'] = model
            self.program['u_view'] = view
            self.phi, self.theta = 0, 0
    
            # OpenGL initalization
            # --------------------------------------
            gloo.set_state(clear_color=(0.30, 0.30, 0.35, 1.00), depth_test=True,
                           polygon_offset=(1, 1), line_width=0.75,
                           blend_func=('src_alpha', 'one_minus_src_alpha'))
            self.timer.start()
    
        def on_draw(self, event):
            gloo.clear(color=True, depth=True)
    
            # Filled cube
            gloo.set_state(blend=False, depth_test=True, polygon_offset_fill=True)
            self.program['u_color'] = 1, 1, 1, 1
            self.program.draw('triangles', self.faces)
    
            # Outlined cube
            gloo.set_state(blend=True, depth_mask=False, polygon_offset_fill=False)
            self.program['u_color'] = 0, 0, 0, 1
            self.program.draw('lines', self.outline)
            gloo.set_state(depth_mask=True)
    
        def on_resize(self, event):
            gloo.set_viewport(0, 0, *event.size)
            projection = perspective(45.0, event.size[0] / float(event.size[1]),
                                     2.0, 10.0)
            self.program['u_projection'] = projection
    
        def on_timer(self, event):
            self.theta += .5
            self.phi += .5
            model = np.eye(4, dtype=np.float32)
            rotate(model, self.theta, 0, 0, 1)
            rotate(model, self.phi, 0, 1, 0)
            self.program['u_model'] = model
            self.update()
    
    if __name__ == '__main__':
        c = Canvas()
        c.show()
        app.run()
