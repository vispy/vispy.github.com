demo/gloo/atom
--------------




.. image:: /_static/images/demo__gloo__atom.png

----

.. code-block:: python
    
    frag = 
    #version 120
    varying vec4 v_color;
    varying float v_size;
    void main()
    {
        float d = 2*(length(gl_PointCoord.xy - vec2(0.5,0.5)));
        gl_FragColor = vec4(v_color.rgb, v_color.a*(1-d));
    }
    """
    
    
    # ------------------------------------------------------------ Canvas class ---
    class Canvas(app.Canvas):
    
        def __init__(self):
            app.Canvas.__init__(self, keys='interactive')
            self.size = 800, 800
            self.title = "Atom [zoom with mouse scroll"
    
            self.program = gloo.Program(vert, frag)
            self.view = np.eye(4, dtype=np.float32)
            self.model = np.eye(4, dtype=np.float32)
            self.projection = np.eye(4, dtype=np.float32)
            self.translate = 6.5
            translate(self.view, 0, 0, -self.translate)
    
            self.program.bind(gloo.VertexBuffer(data))
            self.program['u_model'] = self.model
            self.program['u_view'] = self.view
            self.program['u_size'] = 5 / self.translate
    
            self.theta = 0
            self.phi = 0
            self.clock = 0
            self.stop_rotation = False
    
            self.timer = app.Timer(1.0 / 60)
            self.timer.connect(self.on_timer)
            self.timer.start()
    
        def on_initialize(self, event):
            gloo.set_state('translucent', depth_test=False)
    
        def on_key_press(self, event):
            if event.text == ' ':
                self.stop_rotation = not self.stop_rotation
    
        def on_timer(self, event):
            if not self.stop_rotation:
                self.theta += .05
                self.phi += .05
                self.model = np.eye(4, dtype=np.float32)
                rotate(self.model, self.theta, 0, 0, 1)
                rotate(self.model, self.phi, 0, 1, 0)
                self.program['u_model'] = self.model
            self.clock += np.pi / 100
            self.program['u_clock'] = self.clock
            self.update()
    
        def on_resize(self, event):
            width, height = event.size
            gloo.set_viewport(0, 0, width, height)
            self.projection = perspective(45.0, width / float(height), 1.0, 1000.0)
            self.program['u_projection'] = self.projection
    
        def on_mouse_wheel(self, event):
            self.translate += event.delta[1]
            self.translate = max(2, self.translate)
            self.view = np.eye(4, dtype=np.float32)
            translate(self.view, 0, 0, -self.translate)
    
            self.program['u_view'] = self.view
            self.program['u_size'] = 5 / self.translate
            self.update()
    
        def on_draw(self, event):
            gloo.clear('black')
            self.program.draw('points')
    
    
    if __name__ == '__main__':
        c = Canvas()
        c.show()
        app.run()
