:orphan:

demo/gloo/camera
----------------

Display a live webcam feed. Require OpenCV (Python 2 only).

.. note:: 
                This example is based on ``vispy.gloo`` and thus uses GLSL
                shading code, which is executed at the GPU and is
                defined as multiline strings. 


.. code-block:: python
    
    
    
    try:
        import cv2
    except Exception:
        raise ImportError("You need OpenCV for this example.")
    
    import numpy as np
    from vispy import app
    from vispy import gloo
    
    vertex = """
        attribute vec2 position;
        attribute vec2 texcoord;
        varying vec2 v_texcoord;
        void main()
        {
            gl_Position = vec4(position, 0.0, 1.0);
            v_texcoord = texcoord;
        }
    """
    
    fragment = """
        uniform sampler2D texture;
        varying vec2 v_texcoord;
        void main()
        {
            gl_FragColor = texture2D(texture, v_texcoord);
    
            // HACK: the image is in BGR instead of RGB.
            float temp = gl_FragColor.r;
            gl_FragColor.r = gl_FragColor.b;
            gl_FragColor.b = temp;
        }
    """
    
    
    class Canvas(app.Canvas):
        def __init__(self):
            app.Canvas.__init__(self, size=(640, 480), keys='interactive')
            self.program = gloo.Program(vertex, fragment, count=4)
            self.program['position'] = [(-1, -1), (-1, +1), (+1, -1), (+1, +1)]
            self.program['texcoord'] = [(1, 1), (1, 0), (0, 1), (0, 0)]
            self.program['texture'] = np.zeros((480, 640, 3)).astype(np.uint8)
            self.cap = cv2.VideoCapture(0)
            if not self.cap.isOpened():
                raise Exception("There's no available camera.")
            self._timer = app.Timer('auto', connect=self.on_timer, start=True)
    
        def on_resize(self, event):
            width, height = event.size
            gloo.set_viewport(0, 0, width, height)
    
        def on_draw(self, event):
            gloo.clear('black')
            _, im = self.cap.read()
            self.program['texture'][...] = im
            self.program.draw('triangle_strip')
    
        def on_timer(self, event):
            self.update()
    
    c = Canvas()
    c.show()
    app.run()
    c.cap.release()
