demo/rain
---------




.. code-block:: python
    
    fragment = 
    #version 120
    
    uniform float u_linewidth;
    uniform float u_antialias;
    varying vec4  v_fg_color;
    varying vec4  v_bg_color;
    varying float v_size;
    float disc(vec2 P, float size)
    {
        return length((P.xy - vec2(0.5,0.5))*size);
    }
    void main()
    {
        if( v_fg_color.a <= 0.0)
            discard;
        float actual_size = v_size + u_linewidth + 2*1.5*u_antialias;
        float t = u_linewidth/2.0 - u_antialias;
        float r = disc(gl_PointCoord, actual_size);
        float d = abs(r - v_size/2.0) - t;
        if( d < 0.0 )
        {
             gl_FragColor = v_fg_color;
        }
        else if( abs(d) > 2.5*u_antialias )
        {
             discard;
        }
        else
        {
            d /= u_antialias;
            gl_FragColor = vec4(v_fg_color.rgb, exp(-d*d)*v_fg_color.a);
        }
    }
    """
    
    
    def display():
        gloo.clear()
        program.draw('points')
        glut.glutSwapBuffers()
    
    
    def reshape(width, height):
        gloo.set_viewport(0, 0, width, height)
        projection = ortho(0, width, 0, height, -1, +1)
        program['u_projection'] = projection
    
    
    def keyboard(key, x, y):
        if key == '\033':
            sys.exit()
    
    
    def timer(fps):
        glut.glutTimerFunc(1000 / fps, timer, fps)
        data['a_fg_color'][..., 3] -= 0.01
        data['a_size'] += 1.0
        vdata.set_data(data)
        glut.glutPostRedisplay()
    
    
    def on_passive_motion(x, y):
        global index
        _, _, _, h = gloo.get_parameter('viewport')
        data['a_position'][index] = x, h - y
        data['a_size'][index] = 5
        data['a_fg_color'][index] = 0, 0, 0, 1
        index = (index + 1) % 500
        glut.glutPostRedisplay()
    
    
    # Glut init
    # --------------------------------------
    glut.glutInit(sys.argv)
    glut.glutInitDisplayMode(glut.GLUT_DOUBLE | glut.GLUT_RGBA | glut.GLUT_DEPTH)
    glut.glutCreateWindow('Rain [Move mouse]')
    glut.glutReshapeWindow(512, 512)
    glut.glutReshapeFunc(reshape)
    glut.glutKeyboardFunc(keyboard)
    glut.glutDisplayFunc(display)
    glut.glutPassiveMotionFunc(on_passive_motion)
    glut.glutTimerFunc(1000 / 60, timer, 60)
    
    # Build data
    # --------------------------------------
    n = 500
    data = np.zeros(n, [('a_position', np.float32, 2),
                        ('a_fg_color', np.float32, 4),
                        ('a_size',     np.float32, 1)])
    index = 0
    
    # Build program
    # --------------------------------------
    program = Program(vertex, fragment)
    vdata = VertexBuffer(data)
    program.bind(vdata)
    program['u_antialias'] = 1.00
    program['u_linewidth'] = 1.00
    
    # Build view, model, projection
    # --------------------------------------
    program['u_model'] = np.eye(4, dtype=np.float32)
    program['u_view'] = np.eye(4, dtype=np.float32)
    
    # OpenGL initalization
    # --------------------------------------
    gloo.set_clear_color((1.0, 1.0, 1.0, 1.0))
    gloo.set_state(blend=True, blend_func=('src_alpha', 'one_minus_src_alpha'))
    gloo.gl_initialize()
    
    # Start
    # --------------------------------------
    glut.glutMainLoop()
